@startuml

left to right direction

'title Diagrama de Dominio para TotSeries

namespace Controlador {
    class Totseries{
    -TotSeries instance
    ==
    +TotSeries getInstance()
    +void empezarReproduccion(Episodio episodio)
    +void finalizarREproduccion(Episodio episodio, boolean finalizado)
    +void valorarEpisodio(Episodio episodio, float puntuacion)
    +boolean login(String username,String password)
    +void logout()
    +boolean islogged()
    +boolean registrar(String usuari, String password, String nom,String dni, String adreca)
    +boolean registrar(String usuari, String passwrod, String nom)
    +boolean isloggedAdmin()
    +List<Usuario> getClientesNonVIP()
    +void hacerVip(Cliente cliente)
    +List getSeries()
    +List getEpisodiosMasVistos()
    +List getEpisodiosMasValorados()
    +boolean hasUsuario(String username)
    }
    
}

namespace Vista {

    class EpisodioJDialog{
    -TotSeries controlador
    ==
    -void actionPerformedReproducir()
    -void actionPerformedValorar()
    }
    class LoginJDialong{
    -TotSeries controlador
    ==
    - void actionPerformedLoguearse()
    }
    class RegistroJDialong{
    -TotSeries controlador
    ==
    - void actionPerformedRegistrarse() 
    }
    class Vista{
    -TotSeries controlador
    ==
    + void update(Observable o, Object o1)
    - void actualizarCatalogo()
    - void actualizarTemporadas()
    - void actualizarMasValorados()
    - void actualizarMasVistos()
    - void actualizarClientesNonVIP()
    - void actualizarEpisodios()
    - void actualizarAll()
    - void vaciarListaEpisodios()
    - void vaciarListaClientes()
    - void actionPerformedAsignarVIP()
    - void actionPerformedLogin()
    - void actionPerformedRegistrar()
    - void actionPerformedDesloguear()
    }

}

namespace Model {

    
    class Registro{
    ==
    +void registrarAdmin(String usuari, String password, String nom)
    +void registrarCliente(String nom, String dni, String adreca, String usuari,String password)
    +void setLoggedUser(Usuario user)
    +Usuario getLoggedUser()
    +boolean isLogged()
    +Cliente getLoggedAsCliente()
    +Administrador getLoggedAsAdmin()
    +Usuario login(String username, String password)
    +boolean isLoggedAdmin()
    +List<Usuario> getClientesNonVIP()
    +void setVIP(Cliente cliente)
    +boolean hasUsuario(String username)
    }

    class Usuario {
        - String id
        - String username
        - String password
        - String nombre
    }
    class Cliente {
        - String pais
        - Date nacimiento
        - Boolean vip
        - String dni
        - String direccion
        ==
        + boolean isVip()
        + void nextActivityState()
        + boolean canViewEpisode()
        + Factura getLastFactura()
        + void addVisualizacion()
    }
    
    '###############################################
    interface ActivityState{
        can_view_episode()
        nextState()
    }
    
    class IdleState{
        Boolean can_view_episode()
        Void nextState(Client cliente)
    }

    class ActiveState{
        Boolean can_view_episode()
        Void nextState(Client cliente)
    }

    '#####################################
    class Administrador{
    }

    class Factura{
        -float total
        -Date fecha
        -int visualizaciones
        ==
        + addVisualizacion(Boolean vip)
    }
    
    class Catalogo{
        ==
        + void addSerie(Serie serie)
        + String toString()
        + List<Temporada> getTemporadas (String idSerie)
        + Serie getLastSerie()
        + List<Episodio> getEpisodiosMasValorados()
        + List<Serie> getSeriesMasValoradas()
        + List<Episodio> getEpisodiosMasVistos()
        + List<Temporada> getTEmporadasMasVistas()
        + List<Serie> getSeriesMasVistas()
        + String getDescripcion(String idSerie)
        + void valorarEpisodio(Episodio episodio, float puntuacion, String User_id)
        + Serie getLastSerie()
    }
    class Temporada{
        - int id
        - int numEpisodis
        ==
        + String getMejoresEpisodios()
        +Episodio getEpisodio(int Episodio)
        + void addEpisodio(Episodio)
        +int coutReproducciones()
        +float getPromedio()
        +String toString()
    }

    class Serie{
        -String id
        -String nombre
        -String descripcion
        ==
        + String toString()
        + String getMejoresEpisodios()
        + boolean equals(String idSerie)
        + Temporada getLastTemporada()
        + List<Temporada> getTemporadas()
        + int countReproducciones()
        + float getPromedio()
    }
    class Valoracion{
        -String usuario
        -int puntuacion
        -Date fecha
    }
    
    class Episodio {
        - int id
        - String titulo
        - String duracion
        - String idioma
        - String descripcion
        - float promedio
        - Date fecha
        - String descripciÃ³n
        ==
        + String toString()
        + void setPromedio()
        + void addValoracion(Valoracion valoracion)
        + int countReproducciones()
        + void addReproduccion(Reproduccion r)
    }

    class Reproduccion{
        - String usuario;
        - Date fecha;
    }
    abstract class Artista {
        - String id
        - String nombre
        - String nacionalidad
    }

    class Productora {
        - string nombre
        - String id
        - Date fCreacion
    }

    class Actor{
    }
    class Director{
    }

    Registro "1" -- "0..* | usuarios" Cliente : contine >
    Registro "1" -- "0..* | administradores" Administrador : contine >

    Usuario <|- Cliente
    Usuario <|-- Administrador
    Cliente "1" -- "0..* | facturas" Factura : tiene >  
    Artista  <|-- Actor
    Artista  <|-- Director

    Catalogo "1" *-- "1..* | series" Serie : consta >
    Serie "1" *-- "1..* | temporadas" Temporada : consta >
    Serie "1..*" - "1..* | artistas" Artista : tiene >
    Serie "1..*" - "1..* | productoras" Productora : tiene >
    Temporada "1" *- "1..* | episodios" Episodio : consta >
    Episodio "1" - "0..* | valoraciones" Valoracion : tiene >
    Episodio "1" - "0..* | reproducciones" Reproduccion : tiene >
    
    Cliente "*" - "1 | activity" ActivityState : tiene >
    ActivityState <|-- IdleState : tiene >
    ActivityState <|-- ActiveState : tiene >
}
Controlador.Totseries "1" -- "1" Vista.Vista : usa >
Controlador.Totseries "1" -- "1" Vista.LoginJDialong : usa >
Controlador.Totseries "1" -- "1" Vista.RegistroJDialong : usa >
Controlador.Totseries "1" -- "1" Vista.EpisodioJDialog : usa >

Controlador.Totseries "1" -- "1 | catalogo" Model.Catalogo : tiene >
Controlador.Totseries "1" -- "1 | registro" Model.Registro : tiene >
@enduml